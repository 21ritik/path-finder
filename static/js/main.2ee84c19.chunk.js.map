{"version":3,"sources":["PathFindingVisualizer/Node/Node.jsx","Algorithms/dijkstra.js","PathFindingVisualizer/PathFindingVisualizer.jsx","App.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","PathFindingVisualizer","state","mouseIsPressed","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","onClick","visualizeDijkstra","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2ee84c19.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Node.css\";\n\n// The Node component is used to render the individual grids on the screen and handle functionalities for each of them.\n// It gets the column, row, Start and Finish nodes as well as all the mouse events as props from PathFindingAlgorithm Component.\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n    } = this.props;\n\n    // Handle the CSS for start, finish nodes and the walls by adding corresponding classnames.\n    const extraClassName = isFinish\n      ? \"node-finish\"\n      : isStart\n      ? \"node-start\"\n      : isWall\n      ? \"node-wall\"\n      : \"\";\n\n    return (\n      <div\n        //  Assign a particular node some CSS properties\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n      ></div>\n    );\n  }\n}\n","export function dijkstra(grid, startNode, finishNode) {\n  // Get the grid, the starting node, and the ending node\n  const visitedNodesInOrder = []; // The path traversed in order to reach the finish\n  // Set the distance from start to every other node as infinity\n  startNode.distance = 0; // Except for start node which is 0\n  const unvisitedNodes = getAllNodes(grid); // Get all Unvisited Nodes\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes); // Take two nodes and sort them by their distance\n    const closestNode = unvisitedNodes.shift(); // pop off the element from array\n    if (closestNode.isWall) continue; // If there's a wall, skip it\n    if (closestNode.distance === Infinity) return visitedNodesInOrder; // If surrounded by a wall, stop\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode); // Push the nodes in order\n    if (closestNode === finishNode) return visitedNodesInOrder; // If the finish node, then return the path\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  // Update Neighbour Nodes\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  // get the adjacent nodes that are unvisited\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]); // Top node\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]); // Bottom node\n  if (col > 0) neighbors.push(grid[row][col - 1]); // Left node\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]); // Right node\n  return neighbors.filter((neighbor) => !neighbor.isVisited); // return just the unvisited neighbours\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"../Algorithms/dijkstra\";\nimport \"./PathFindingVisualizer.css\";\n\n// Set the initial start and finish nodes.\nconst startRow = 10;\nconst startCol = 10;\nconst finishRow = 10;\nconst finishCol = 39;\n\n// Set the inital state of the an empty grid and mouseAction\nexport default class PathFindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  // Draw the grid on Component Mount\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n\n  // With every click draw a wall\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  // Enable Mouse Drag to draw wall\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  // handle Animations for path exlporation\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, 10 * i);\n    }\n  }\n\n  // handle animations for shortest path\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const { grid } = this.state;\n    const startNode = grid[startRow][startCol];\n    const finishNode = grid[finishRow][finishCol];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <>\n        <button onClick={() => this.visualizeDijkstra()} className=\"visualize\">\n          Visualize\n        </button>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isFinish, isStart, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\n// Set the grid state to 20x50\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === startRow && col === startCol,\n    isFinish: row === finishRow && col === finishCol,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport PathFindingVisualizer from \"./PathFindingVisualizer/PathFindingVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathFindingVisualizer></PathFindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}